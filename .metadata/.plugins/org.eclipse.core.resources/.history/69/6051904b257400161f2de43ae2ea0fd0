package duende;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

/**
 *
 * @author Maicon Machado Gerardi da Silva
 * @author Débora Ghilardi
 */
class Grafo {
	private static final int BRANCO = 0;
	private static final int CINZA = 1;
	private static final int PRETO = 2;
	private static final int NIL = -1;

	public static int SAIDA = 0;
	public static int SEM_SAIDA = 1;
	public static int CRISTAL = 2;
	public static int DUENDE = 3;
	private static final int INFINIT = Integer.MAX_VALUE;

	private int[][] matriz;
	private int x, y;
	private int xDuende = -1, yDuende = -1;

	public Grafo(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public void setMatriz(int[][] matriz) throws Exception {
		this.matriz = matriz;
	}

	public void atribuirDuende(int x, int y) {
		xDuende = x;
		yDuende = y;
	}

	public int quantidadeMenorCaminho() {
		int[][] cor = new int[x][y];
		int[][] pai = new int[x][y];
		int[][] distancia = new int[x][y];

		for (int i = 0; i < matriz.length; i++) {
			for (int j = 0; j < matriz[i].length; j++) {
				if (matriz[i][j] == CRISTAL) {
					cor[i][j] = PRETO;
				} else {
					cor[i][j] = BRANCO;
				}
				pai[i][j] = NIL;
				distancia[i][j] = INFINIT;
			}
		}

		distancia[xDuende][yDuende] = 0;
		cor[xDuende][yDuende] = CINZA;

		Queue<Integer> filaX = new LinkedList<Integer>();
		Queue<Integer> filaY = new LinkedList<Integer>();
		filaX.add(xDuende);
		filaY.add(yDuende);

		int menorCaminho = Integer.MAX_VALUE;
		while (!filaX.isEmpty()) {
			int xAtual = filaX.remove();
			int yAtual = filaY.remove();

			// direita
			try {
				int proxY = (yAtual - 1);
				if (cor[xAtual][proxY] == BRANCO) {
					cor[xAtual][proxY] = CINZA;
					distancia[xAtual][proxY] = distancia[xAtual][yAtual] + 1;
					filaX.add(xAtual);
					filaY.add(proxY);
				}
			} catch (ArrayIndexOutOfBoundsException e) {

			}

			// esquerda
			try {
				int proxY = (yAtual + 1);
				if (cor[xAtual][proxY] == BRANCO) {
					cor[xAtual][proxY] = CINZA;
					distancia[xAtual][proxY] = distancia[xAtual][yAtual] + 1;
					filaX.add(xAtual);
					filaY.add(proxY);
				}
			} catch (ArrayIndexOutOfBoundsException e) {

			}

			// cima
			try {
				int proxX = (xAtual - 1);
				if (cor[proxX][yAtual] == BRANCO) {
					cor[proxX][yAtual] = CINZA;
					distancia[proxX][yAtual] = distancia[xAtual][yAtual] + 1;
					filaX.add(proxX);
					filaY.add(yAtual);
				}
			} catch (ArrayIndexOutOfBoundsException e) {

			}

			// baixo
			try {
				int proxX = (xAtual + 1);
				if (cor[proxX][yAtual] == BRANCO) {
					cor[proxX][yAtual] = CINZA;
					distancia[proxX][yAtual] = distancia[xAtual][yAtual] + 1;
					filaX.add(proxX);
					filaY.add(yAtual);
				}
			} catch (ArrayIndexOutOfBoundsException e) {

			}

			if (matriz[xAtual][yAtual] == SAIDA) {
				if (distancia[xAtual][yAtual] < menorCaminho) {
					menorCaminho = distancia[xAtual][yAtual];
				}
			}

			cor[xAtual][yAtual] = PRETO;
		}

		return menorCaminho;
	}

}

public class Main {

	public static void main(String[] args) throws Exception {
		// BufferedReader teclado = new BufferedReader(new
		// FileReader("C:\\teste.txt"));
		BufferedReader teclado = new BufferedReader(new InputStreamReader(System.in));

		String xy[] = teclado.readLine().split(" ");
		int x = Integer.parseInt(xy[0]);
		int y = Integer.parseInt(xy[1]);

		Grafo grafo = new Grafo(x, y);

		for (int i = 0; i < x; i++) {
			String[] linha = teclado.readLine().split(" ");
			int[] valores = new int[linha.length];
			for (int m = 0; m < linha.length; m++) {
				valores[m] = Integer.parseInt(linha[m]);

				if (valores[m] == Grafo.DUENDE) {
					grafo.atribuirDuende(i, m);
				}
			}

			grafo.receberValores(i, valores);
		}

		System.out.println(grafo.quantidadeMenorCaminho());
	}
}
